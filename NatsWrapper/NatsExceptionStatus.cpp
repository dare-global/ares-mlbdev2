// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// MLB NatsWrapper Library Module File
// ////////////////////////////////////////////////////////////////////////////
/*
   File Name         :  NatsExceptionStatus.cpp

   File Description  :  Implementation of the NatsExceptionStatus class.

   Revision History  :  2024-09-10 --- Creation.
                           Michael L. Brock

      Copyright Michael L. Brock 2024.
      Distributed under the Boost Software License, Version 1.0.
      (See accompanying file LICENSE_1_0.txt or copy at
      http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <NatsWrapper/NatsExceptionStatus.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace NatsWrapper {

// ////////////////////////////////////////////////////////////////////////////
NatsExceptionStatus::NatsExceptionStatus()
	:std::runtime_error("")
	,nats_code_(NATS_OK)
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
NatsExceptionStatus::NatsExceptionStatus(const std::string &error_text)
	:std::runtime_error(error_text)
	,nats_code_(NATS_OK)
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
NatsExceptionStatus::NatsExceptionStatus(natsStatus nats_code,
	const char *func_name)
	:std::runtime_error(GetStatusString(nats_code, func_name))
	,nats_code_(nats_code)
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
NatsExceptionStatus::~NatsExceptionStatus()
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
natsStatus NatsExceptionStatus::GetNatsStatus() const
{
	return(nats_code_);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
std::string NatsExceptionStatus::GetStatusString(natsStatus nats_code,
	const char *func_name)
{
	func_name = (func_name && *func_name) ? func_name : "*UNKNOWN-FUNCTION*";

	const char *nats_text = ::natsStatus_GetText(nats_code);

	nats_text = (nats_text && *nats_text) ? nats_text : "*UNKNOWN-NATS-TEXT*";

	std::string status_string("NATS error code " + std::to_string(nats_code) +
		" (\"" + std::string(nats_text) + "\") was encountered in function " +
		std::string(func_name) + "().");

	return(status_string);
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace NatsWrapper

} // namespace MLB

// ////////////////////////////////////////////////////////////////////////////
// ****************************************************************************
// ****************************************************************************
// ****************************************************************************
// ////////////////////////////////////////////////////////////////////////////

#ifdef TEST_MAIN

#include <iomanip>
#include <iostream>

namespace {

// ////////////////////////////////////////////////////////////////////////////
void TEST_NatsExceptionStatus()
{
	using namespace MLB::NatsWrapper;

	NatsWrapperList section_list;

	for (int nats_code = -1; nats_code < 100; ++nats_code) {
		try {
			throw NatsExceptionStatus(static_cast<natsStatus>(nats_code),
				"Test natsStatus = " + std::to_string(nats_code));
		}
		catch (const std::exception &except) {
			std::cout << "RESULTS FOR NATS CODE = " << std::setw(3) <<
				nats_code << ": " << except.what() << '\n';
		}
	}
}
// ////////////////////////////////////////////////////////////////////////////

} // Anonymous namespace

// ////////////////////////////////////////////////////////////////////////////
int main()
{
	int return_code = EXIT_SUCCESS;

	try {
		TEST_NatsExceptionStatus();
	}
	catch (const std::exception &except) {
		return_code = EXIT_FAILURE;
		std::cerr << "\n\nERROR: " << except.what() << std::endl;
	}

	return(return_code);
}
// ////////////////////////////////////////////////////////////////////////////

#endif // #ifdef TEST_MAIN

