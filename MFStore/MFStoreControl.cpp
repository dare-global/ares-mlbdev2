// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// MLB MFStore Library Module File
// ////////////////////////////////////////////////////////////////////////////
/*
   File Name         :  MFStoreControl.cpp

   File Description  :  Implementation of the MFStoreControl class.

   Revision History  :  2021-02-14 --- Creation.
                           Michael L. Brock

      Copyright Michael L. Brock 2021 - 2024.
      Distributed under the Boost Software License, Version 1.0.
      (See accompanying file LICENSE_1_0.txt or copy at
      http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <MFStore/MFStoreControl.hpp>

#include <MFStore/CheckValues.hpp>

#include <Utility/ArgCheck.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace MFStore {

// ////////////////////////////////////////////////////////////////////////////
MFStoreControl::MFStoreControl()
	:mapping_sptr_()
	,region_sptr_()
	,file_name_()
	,file_size_(0)
	,mmap_size_(0)
	,alloc_gran_(0)
{
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
MFStoreControl::MFStoreControl(const std::string &file_name,
	MFStoreLen file_size, MFStoreLen mmap_size, MFStoreLen alloc_gran)
try
	:mapping_sptr_()
	,region_sptr_()
	,file_name_()
	,file_size_(0)
	,mmap_size_(0)
	,alloc_gran_(0)
{
	using namespace boost::interprocess;

	MLB::Utility::ThrowIfEmpty(file_name, "The MFStore file name");

	CheckInitialFileAndMmapSizes(file_size, mmap_size, alloc_gran);

	FileMappingSPtr  mapping_sptr(
		std::make_shared<FileMapping>(file_name.c_str(), read_write));
	MappedRegionSPtr region_sptr(
		std::make_shared<MappedRegion>(*mapping_sptr, read_write, 0, mmap_size));

	mapping_sptr_.swap(mapping_sptr);
	region_sptr_.swap(region_sptr);

	file_name_  = file_name;
	file_size_  = file_size;
	mmap_size_  = mmap_size;
	alloc_gran_ = alloc_gran;
}
catch (const std::exception &except) {
	std::runtime_error("Failed to create interprocess mapping and region for "
		"'" + file_name + "' with a size of " + std::to_string(file_size) +
		"bytes and a mmap size of " + std::to_string(mmap_size) + " bytes: " +
		std::string(except.what()));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
/*
   CODE NOTE: Pending review
MFStoreControl::MFStoreControl(FileMappingSPtr mapping_sptr,
	MappedRegionSPtr region_sptr)
	:mapping_sptr_(mapping_sptr)
	,region_sptr_(region_sptr)
	,file_name_()
	,file_size_(0)
	,mmap_size_(0)
	,alloc_gran_(0)
{
	MLB::Utility::ThrowIfNull(mapping_sptr.get(),
		"The interprocess mapping shared pointer");
	MLB::Utility::ThrowIfNull(region_sptr.get(),
		"The interprocess region shared pointer");
}
*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool MFStoreControl::IsActive() const
{
	return(mapping_sptr_.get() && region_sptr_.get());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
bool MFStoreControl::CheckIsActive() const
{
	if (!IsActive())
		throw std::runtime_error("The MFStoreControl instance contains at "
			"least one empty shared pointer.");

	return(true);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const std::string &MFStoreControl::GetFileName() const
{
	return(file_name_);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
MFStoreFileHandle MFStoreControl::GetFileHandle() const
{
	CheckIsActive();

	return(mapping_sptr_->get_mapping_handle().handle);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
MFStoreLen MFStoreControl::GetFileSize() const
{
	return(file_size_);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
MFStoreLen MFStoreControl::GetMmapSize() const
{
	return(mmap_size_);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
MFStoreLen MFStoreControl::GetAllocGran() const
{
	return(alloc_gran_);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
const void *MFStoreControl::GetMmapAddress() const
{
	CheckIsActive();

	return(region_sptr_->get_address());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
FileMappingSPtr MFStoreControl::GetMappingSPtr() const
{
	return(mapping_sptr_);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
MappedRegionSPtr MFStoreControl::GetRegionSPtr() const
{
	return(region_sptr_);
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace MFStore

} // namespace MLB

