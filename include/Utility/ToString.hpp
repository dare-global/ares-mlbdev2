// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	MLB Utility Library Include File
// ////////////////////////////////////////////////////////////////////////////
/*
   File Name			:	ToString.hpp

   Revision History	:	1998-04-08 --- Creation of original AnyToString()
												   function templates.
									Michael L. Brock
   							2023-01-06 --- Change names of core functions to
													ToString() and make AnyToString()
												   forward to those functions.
									Michael L. Brock

		Copyright Michael L. Brock 1998 - 2023.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

#ifndef HH__MLB__Utility__ToString_hpp__HH

#define HH__MLB__Utility__ToString_hpp__HH	1

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
/**
	\file ToString.hpp

	\brief	The ToString functions header file.
*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <Utility/Utility.hpp>

#include <sstream>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace Utility {

// ////////////////////////////////////////////////////////////////////////////
template <typename DataType>
	inline std::string ToString(const DataType &datum)
{
	std::ostringstream tmp_text;

	tmp_text << datum;

	return(tmp_text.str());
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
template <>
	inline std::string ToString<bool>(const bool &datum)
{
	return((datum) ? "true" : "false");
}
// ////////////////////////////////////////////////////////////////////////////

// //////////////////////////////////////////////////////////////////////////
template <>
	inline std::string ToString<unsigned char>(const unsigned char &datum)
{
	return(ToString<unsigned long>(static_cast<unsigned long>(datum)));
}
// //////////////////////////////////////////////////////////////////////////

// //////////////////////////////////////////////////////////////////////////
template <>
	inline std::string ToString<signed char>(const signed char &datum)
{
	return(ToString<signed long>(static_cast<signed long>(datum)));
}
// //////////////////////////////////////////////////////////////////////////

/*
	Specialization work-around for MSVC 64-bit std::size_t compatibility...
 
	CODE NOTE: May not be required under MSVC++ 8.x. To be determined.
*/
#if defined(_MSC_VER) && (_MSC_VER >= 1300) && (_MSC_VER <= 1310)
// ////////////////////////////////////////////////////////////////////////////
template <>
	inline std::string ToString<std::size_t>(const std::size_t &datum)
{
	return(ToString<unsigned long long>(
		static_cast<unsigned long long>(datum)));
}
// ////////////////////////////////////////////////////////////////////////////
#endif // #if defined(_MSC_VER) && (_MSC_VER >= 1300) && (_MSC_VER <= 1310)

} // namespace Utility

} // namespace MLB

#endif // #ifndef HH__MLB__Utility__ToString_hpp__HH

