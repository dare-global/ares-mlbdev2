// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	MLB Utility Library Include File
// ////////////////////////////////////////////////////////////////////////////
/*
   File Name			:	ValueToStringRadix.hpp

   File Description	:	Maximum radix digits for two's complement integers.

	Revision History	:	1998-04-08 --- Creation
									Michael L. Brock
   							2023-01-04 --- Changed to invoke new ToStringRadix()
					   							function templates.
									Michael L. Brock

		Copyright Michael L. Brock 1998 - 2023.
		Distributed under the Boost Software License, Version 1.0.
		(See accompanying file LICENSE_1_0.txt or copy at
		http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

#ifndef HH__MLB__Utility__ValueToStringRadix_hpp__HH

#define HH__MLB__Utility__ValueToStringRadix_hpp__HH	1

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
/**
	\file ValueToStringRadix.hpp

	\brief	The ValueToStringRadix[Bin|Oct|Dec|Hex]() functions header.
*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
//	Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <Utility/ToStringRadix.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace Utility {

// ////////////////////////////////////////////////////////////////////////////
template <typename DatumType>
	inline std::string ValueToStringBin(const DatumType &datum,
		bool prefix_flag = true, char pad_char = '0')
{
	return(ToStringBin(datum, (prefix_flag) ? 'b' : '\0', pad_char));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
template <typename DatumType>
	inline std::string ValueToStringOct(const DatumType &datum,
		bool prefix_flag = true, char pad_char = '0')
{
	return(ToStringOct(datum, (prefix_flag) ? 'o' : '\0', pad_char));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
template <typename DatumType>
	inline std::string ValueToStringDec(const DatumType &datum,
		bool prefix_flag = true, char pad_char = '0')
{
	return(ToStringDec(datum, (prefix_flag) ? 'd' : '\0', pad_char));
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
template <typename DatumType>
	inline std::string ValueToStringHex(const DatumType &datum,
		bool prefix_flag = true, char pad_char = '0')
{
	return(ToStringHex(datum, (prefix_flag) ? 'x' : '\0', pad_char));
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace Utility

} // namespace MLB

#endif // #ifndef HH__MLB__Utility__ValueToStringRadix_hpp__HH

