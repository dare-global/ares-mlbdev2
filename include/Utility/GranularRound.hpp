// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// MLB Utility Library Include File
// ////////////////////////////////////////////////////////////////////////////
/*
   File Name         :  GranularRound.hpp

   File Description  :  Include file for data type alignment.

   Revision History  :  1992-09-13 --- Creation in AlignmentSupport.hpp.
                           Michael L. Brock
                        2023-01-06 --- New file with just granular functions.
                           Michael L. Brock

      Copyright Michael L. Brock 1992 - 2023.
      Distributed under the Boost Software License, Version 1.0.
      (See accompanying file LICENSE_1_0.txt or copy at
      http://www.boost.org/LICENSE_1_0.txt)

*/
// ////////////////////////////////////////////////////////////////////////////

#ifndef HH__MLB__Utility__GranularRound_hpp__HH

#define HH__MLB__Utility__GranularRound_hpp__HH 1

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
/**
   \file    GranularRound.hpp

   \brief   Logic to support of round-up/round-down by granular quanta.
*/
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
// Required include files...
// ////////////////////////////////////////////////////////////////////////////

#include <Utility/Utility.hpp>

// ////////////////////////////////////////////////////////////////////////////

namespace MLB {

namespace Utility {

// ////////////////////////////////////////////////////////////////////////////
template <typename DataType>
	DataType GranularRoundDown(DataType datum, DataType granularity)
{
	if ((datum < static_cast<DataType>(1)) ||
		(granularity < static_cast<DataType>(1)))
		return(0);

	return((datum / granularity) * granularity);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
template <typename DataType>
	DataType GranularRoundUp(DataType datum, DataType granularity)
{
	DataType tmp_datum = GranularRoundDown(datum, granularity);

	return(((!datum) || (datum % granularity)) ?
		(tmp_datum + granularity) : tmp_datum);
}
// ////////////////////////////////////////////////////////////////////////////

// ////////////////////////////////////////////////////////////////////////////
template <typename DataType>
	DataType GranularRound(DataType datum, DataType granularity)
{
	DataType tmp_datum = GranularRoundDown(datum, granularity);

	return(((!datum) || (!(datum % granularity))) ? tmp_datum :
		(tmp_datum + granularity));
}
// ////////////////////////////////////////////////////////////////////////////

} // namespace Utility

} // namespace MLB

#endif // #ifndef HH__MLB__Utility__GranularRound_hpp__HH

